<?php

if (!function_exists('t')){
  function t($text){
    return $text;
  }
}

$root = dirname(__FILE__);
$cwd = explode('/',str_replace("$root/",'',getcwd()));
$module = array_shift($cwd);
$_access_callback = $module . '_access_callback';
require_once "$root/myPear/config.inc";
require_once "$root/$module/config.inc";
require_once "$root/$module/includes/APImenu_${module}.inc";

switch($module){
case 'ea':  $menu =  EA::_MENU(); break;
case 'vm':  $menu =  VM::_MENU(); break;
case 'wiw': $menu = WIW::_MENU(); break;
default: die("??? $module\n");
}

system("rm -rf /tmp/*.yml");
foreach(array('links','routing') as $yml){
  $fn = sprintf("/tmp/%s.%s.yml",$module,$yml);
  system("touch $fn");
  $file[$yml] = fopen($fn,'a');
}

$menu_tree = $menu->build_menuTree('dummy_page_callback','dummy_access_callback');

$ids = array();
foreach($menu_tree as $path=>$item){
  
  if (count(explode('/',$path)) == 1){
    $title  = $item['title'];
    $tab = $module;
    $parent = '';
  }else{
    $path_parent = explode('/',$path);
    $tab = APItabs::code2tab(array_pop($path_parent));
    $title = call_user_func("_".$module."_title_callback",$tab);
    $parent = implode('_',$path_parent);
  }
      
  $weight = (int)$item['weight'];
  $route_name = str_replace('/','_',$path);
  
  build_routing_yml();
  build_links_yml();  
}  

foreach(array('links','routing') as $yml)  fclose($file[$yml]);
system("ls -lrt /tmp/*yml");
system("grep -E '<.*>' /tmp/*yml");

exit;

/*
 * title: (required) The untranslated title of the menu link.
 * description: The untranslated description of the link.
 * route_parameters: (optional) The route parameters to build the path. An array.
 * route_name: (optional) The route name to be used to build the path. Either a
 *   route_name or a link_path must be provided.
 * link_path: (optional) If you have an external link use link_path instead of providing a route_name.
 * parent: (optional) The machine name of the link that is this link's menu parent.
 * weight: (optional, defaults to 0) An integer that determines the relative position of items
 *   in the menu; higher-weighted items sink.  Menu items with the same weight are ordered alphabetically.
 * menu_name: (optional) The machine name of a menu to put the link in, if not the default Tools menu. 
 *   Common names are "account", "admin", "footer", "main", "tools"
 * expanded: (optional) If set to TRUE, and if a menu link is provided for this
 *   menu item (as a result of other properties), then the menu link is always
 *   expanded, equivalent to its 'always expanded' checkbox being set in the UI.
 * options: (optional) An array of options to be passed to l() when generating a link from this menu item.
 */
function build_links_yml(){
  global $file,$parent;

  fwrite($file['links'],process_template("
<module>.<route_name>:
  title: <title>
  route_name: <module>.<route_name>
  route_parameters:
   - q: <path>
   - tab: <tab>
  weight: <weight>
  menu_name: main
" . (empty($parent) ? "" : "  parent: <module>.<parent>\n")));
}

/*
 * path:
 *   The path for this route
 * defaults:
 *   _content: This is a content page, our class provides a render array
 *   _controller: A controller class does all of the processing for this path
 *   _title: A static title for our page
 *   _title_callback: The page title is generated by a method in our class
 * requirements:
 *   _permission: only give access to users with this permission
 *   _role: only give access to users with this role
 *   _access: access is either granted (TRUE) or not (FALSE)
 *   _custom_access: access is determined by a method in our class
 */
function build_routing_yml(){
  global $file;

  fwrite($file['routing'],process_template("
<module>.<route_name>:
  path: /<path>
  defaults:
    _controller:     Drupal\\<module>\\<module>Controller::getContent
    _title_callback: Drupal\\<module>\\<module>Controller::getTitle
  requirements:
    _custom_access:  Drupal\\<module>\\<module>Controller::getAccess
"));
}

/*
 *
 */
function process_template($template){
  global $module, $path, $route_name, $parent, $weight, $title, $tab;
  
  return str_replace(array('<module>',
			   '<path>',
			   '<route_name>',
			   '<weight>',
			   '<title>',
			   '<tab>',
			   '<parent>',
			   ),
		     array($module,
			   $path,
			   $route_name,
			   $weight,
			   $title,
			   $tab,
			   $parent,
			   ),
		     $template);
}

function dummy_page_callback(){
  printf("%s called\n",__FUNCTION__);
}
function dummy_access_callback(){
  printf("%s called\n",__FUNCTION__);
}
