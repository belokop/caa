<?php
/**
 * Drupal hello world module.
 * Contains a few examples of the myPear usage.
 */

require_once 'hwController.php';

/*
 * Implementation of hook_init()
 */
function hw_init(){}

/*
 * Implementation of hook_menu()
 */
function _hw_access(){
  return  (@$_GET['q'] === 'hw');
}

function hw_menu(){
  return array('hw'                      => array('title'            => t('Hello world'),
						  'type'             => MENU_CALLBACK,
						  'page callback'    => 'hw_render',
						  'access callback'  => True,
						  ),
	       
	       'hw/ajax_link'            => array('title' => 'Ajax Link ("use-ajax" class)',
						  'page callback' => 'ajax_example_render_link',
						  'access callback' => '_hw_access',
						  'file' => 'ajax_example_misc.inc',
						  'weight' => 9,
						  ),
	       );
}


/*
 * The Hello world code.
 *
 * Drupal expects the html code as the return value from this routine, 
 * hence i use ob_start/ob_get_contents/ob_end_clean
 */
function hw_render() {
  if (class_exists('b_cnf',False) && b_cnf::get('igor')){
    ob_start();
    require_once 'igor_hostel.inc';
    $reply = ob_get_contents();
    ob_end_clean();
    myPear::H1('Hello CERN', 'reset');
    return $reply;
  }

  // Test is myPear loaded
  $modules = array_intersect(array('myPear','hw','wiw','ea','jam','vm',
				   'legacy','lic','page_load_progress','prp'),module_list());
  if (in_array('myPear',$modules) && ($path=drupal_get_path('module','myPear'))){
    if (!function_exists('module_list')) require_once "$path/includes/drupal8_compat.inc";
    if (!function_exists('_myPear_install_bDB') && file_exists($f="./$path/myPear.install")){
      require_once $f;
      myPear_install();
    }
  }
  

  // debugging JS
  if (isset($_GET['js'])){
    ob_start();
    if (!empty($_POST)) sleep(3);
    $self = $_SERVER['PHP_SELF'];
    $self = $_SERVER['QUERY_STRING'];
    //    var_dump($self,$_POST);
    print "
<h3>page_load_progress test</h3>
<form action='?$self' method='post'>
     <input name='button' type='submit' class='form-submit page_load_progress' />
</form>
";
    $reply = ob_get_contents();
    ob_end_clean();
    return $reply;
  }
    
  $message = '<br>Mauris mauris ante, blandit et, ultrices a, suscipit eget, quam. Integer ut neque.';

  $texts = array('Mauris mauris ante'=>'Mauris mauris ante, blandit et, ultrices a, suscipit eget, quam. Integer
		ut neque. Vivamus nisi metus, molestie vel, gravida in, condimentum sit
		amet, nunc. Nam a nibh. Donec suscipit eros. Nam mi. Proin viverra leo ut
		odio. Curabitur malesuada. Vestibulum a velit eu ante scelerisque vulputate.',
		 
		 'Sed non urna'=>'Sed non urna. Donec et ante. Phasellus eu ligula. Vestibulum sit amet
		purus. Vivamus hendrerit, dolor at aliquet laoreet, mauris turpis porttitor
		velit, faucibus interdum tellus libero ac justo. Vivamus non quam. In
		suscipit faucibus urna.',
		 
		 'Nam enim risus'=>'Nam enim risus, molestie et, porta ac, aliquam ac, risus. Quisque lobortis.
		Phasellus pellentesque purus in massa. Aenean in pede. Phasellus ac libero
		ac tellus pellentesque semper. Sed ac felis. Sed commodo, magna quis
		lacinia ornare, quam ante aliquam nisi, eu iaculis leo purus venenatis dui.');
  ob_start();

  /*
   * myPear messages
   */ 
  if (class_exists('myPear',0)){
    myPear::DEBUG("This is myPear::DEBUG()$message");
    myPear::MESSAGE("This is myPear::MESSAGE()$message");
    myPear::WARNING("This is myPear::WARNING()$message");
    myPear::ERROR("This is myPear::ERROR()$message");
    myPear::INFO(strip_tags($message),"This is myPear::INFO()");
  }

  
  print "<h2>Source code of this page</h2>";
  print "<a href='http://code.google.com/p/norweb/source/browse/trunk/helloworld/_drupal-6/hw.module' class='form-submit page_load_progress'>
         See the source code of this demo here 
         </a>";
  
  if (defined('DRUPAL_ROOT')){
    printf("<h2>DRUPAL_ROOT %s</h2><p>cwd=%s</p><p>__FILE__=%s</p>",DRUPAL_ROOT,getcwd(),__FILE__);
  }

  if (@$_GET['rb']){
    print "<h2>Rebuilding drupal menu</h2>";
    menu_rebuild();
    menu_router_build();
  }  

  if (function_exists('x')){
    print "<h2>Example of autocomplete (countries)</h2>";
    $name = 'testCC';
    b_cc::autocomplete($name);
    $value   = @$_POST[$name];
    b_cc::getCC($value);
    $country = "<input id='$name' name='$name' size='40' value='$value' maxlength='99' type='text'/>";
    $submitt = "<input name='_s' type='submit' class='form-submit page_load_progress'/>";
    print x('form action="'.b_url::same().'" method="post"',$country.'<br/>'.$submitt);
  }

  /*
   * Test resisable table
   */
  if (class_exists('bJS',False)){
    bJS()->add_css_inline("
.test_table {
    border: 1px solid black;
    border-collapse: collapse;
}
");
    
    print x('h2','Table test');
    print x('table class="test_table"',
	    x('thead','Table head').
	    x('tbody',
	      x('tr',
		x('td','td1').
		x('td','td2').
		x('td','td3')
		)
	      )
	    );
  }		   
  
  /*
   * Tabs
   */
  foreach(array('b_tabs_JQ','b_tabs_myPear') as $b_tabs) {
    if (class_exists($b_tabs,0)){
      print "<h2>Class $b_tabs()</h2>";
      $t = new $b_tabs(array_keys($texts));
      foreach(array_values($texts) as $body){
	if ($t->body())      print $body;
      }
      $t->close();
    }
  }
  
  /*
   * Fancybox
   */
  if (class_exists('myPear',0)){
    $time = 20000;
    bJS()->add_js_inline("\$(function(){\$('p.jtest').fadeIn($time);})",True);
    print '<br/><br/><h2>bJS()->modal_iframe($url);</h2>';
    print x('ul',
	    join("\n",array(
			    x('li',bJS()->modal_iframe('http://www.youtube.com/embed/uq8dFRxWJW0?autoplay=1','Watch Nordita colloqium','')),
			    x('li',bJS()->modal_iframe('http://www.youtube.com/embed/W4Sr8dCyw1o?autoplay=1','Watch the AlbaNova movie 1','')),
			    x('li',bJS()->modal_iframe('http://www.youtube.com/embed/L8hOamY2-ks?autoplay=1','Watch the AlbaNova movie 2','')),
			    //x('li',x("a href=".b_url::same('?movie_once=http://videos.nordita.org/colloquia/2011/2011-12-19-Joseph_Silk,Johns_Hopkins_University.wmv'),'Watch Nordita colloqium via the browser media player')),
			    ))).'<br/><br/>';
  }

  /*
   *
   */  
  if (class_exists('myPear',0)){
    if (0)    print x("zzz title='test title'",
		      bJS()->fancybox_inline('<h2>bJS()->fancybox_inline</h2></h4>Modal popup window</h4>'));
  }
  
  /*
   * Captcha
   */
  if (0 && function_exists('b_reCAPTCHA')){
    print x('h2','Captcha');
    b_debug::var_dump(b_reCAPTCHA());
    bJS()->fancybox_inline(b_reCAPTCHA());
    //    print bJS()->modal_iframe('http://www.youtube.com/embed/uq8dFRxWJW0?autoplay=1','captcha','')),
    //		  bJS()->fancybox_inline(b_reCAPTCHA()));
  }


  /*
   * jQuery fadeIn
   */
  if (class_exists('myPear',0)){
    $time = 20000;
    print "<h2>jQuery \"fadeIn\" effect</h2>".
      "<p class='jtest' style='background-color: palegreen; display:none;'>
       This is an example of an effect which is built into the core jQuery
       library. <br>This text should fade in after the DOM is loaded, duration=$time milliseconds, see <a href=http://api.jquery.com/fadeIn/>here</a> 
      </p>";
  }    
  
  /*
   * datePicker
   */
  if (function_exists('locateAndInclude')){
    locateAndInclude('b_datePicker.inc');
    print "<h2>bDatePicker()->get2()</h2>";
    myPear::set_main_selector(bDatePicker()->get2('from',0,'to',0,$returnResult=True));
  }
  
  /*
   * myPear accordion
   */
  if (class_exists('b_fmt',0)){
    print '<h2>b_fmt::accordion()</h2>';
    b_fmt::accordion('open',0);                // start the accordion
    foreach($texts as $title=>$body){
      b_fmt::accordion($title,'h4-accordion');    // start the next accordion section
      print $body;
    }
    b_fmt::accordion('close');               // close the accordion

    print '<h2>b_fmt::accordion() "closed"</h2>';
    b_fmt::accordion('open',99);             // start the accordion
    foreach(array("show what is in the accordion"=>bIcons()->get('b-approved')) as $title=>$body){
	b_fmt::accordion($title);    // start the next accordion section
      print $body;
    }
    b_fmt::accordion('close');               // close the accordion
  }

  /*
   * myPear collapsible
   */
  if (class_exists('b_reg',0)){
    print '<h2>modules:</h2>';

    /*
     * b_table family example, here b_table_zebra
     */
    $t = new b_table_zebra(array('state'=>'',
				 'm' =>'Module name',
				 'v' =>'Version',
				 'r' =>'Release date'));
    $t->showLineCounter = False;  
    $t->css['v']['align'] = 'align_left';
    foreach(b_reg::$modules as $m){
      if (!empty($m['d'])){
	$t->extraTD[] = bIcons()->getButton(array('l'=>b_url::same("?q=$m[m]"),'i'=>@$m['i'],'d'=>$m['d']));
      }
      $t->prt($m);
    }
    $t->close();
  }    
  
  /*
   * End...
   */
  $reply = ob_get_contents();
  ob_end_clean();
  return $reply;
}

function hw_search($op = 'search', $keys = NULL) {
  switch ($op) {
  case 'name':
    return t('Content');
    
    case 'reset':
      db_query("UPDATE {search_dataset} SET reindex = %d WHERE type = 'node'", array(time()));
      return;
      
  case 'status':
    $total = db_result(db_query('SELECT COUNT(*) FROM {node} WHERE status = 1'));
    $remaining = db_result(db_query("SELECT COUNT(*) FROM {node} n LEFT JOIN {search_dataset} d ON d.type = 'node' AND d.sid = n.nid WHERE n.status = 1 AND (d.sid IS NULL OR d.reindex <> 0)"));
    return array('remaining' => $remaining, 'total' => $total);
    
  case 'admin':
    $form = array();
    // Output form for defining rank factor weights.
    $form['content_ranking'] = array('#type' => 'fieldset', 
				     '#title' => t('Content ranking'),
				     );
    $form['content_ranking']['#theme'] = 'node_search_admin';
    $form['content_ranking']['info'] = array('#value' => '<em>' . t('The following numbers control which properties the content search should favor when ordering the results. Higher numbers mean more influence, zero means the property is ignored. Changing these numbers does not require the search index to be rebuilt. Changes take effect immediately.') . '</em>',
					     );
    
    $ranking = array('node_rank_relevance' => t('Keyword relevance'), 
		     'node_rank_recent' => t('Recently posted'),
		     );
    if (module_exists('comment')) {
      $ranking['node_rank_comments'] = t('Number of comments');
    }
    if (module_exists('statistics') && variable_get('statistics_count_content_views', 0)) {
      $ranking['node_rank_views'] = t('Number of views');
    }
    
      // Note: reversed to reflect that higher number = higher ranking.
    $options = drupal_map_assoc(range(0, 10));
    foreach ($ranking as $var => $title) {
      $form['content_ranking']['factors'][$var] = array('#title' => $title, 
							'#type' => 'select', 
							'#options' => $options, 
							'#default_value' => variable_get($var, 5),
							);
    }
    return $form;
    
  case 'search':
    // Build matching conditions
    list($join1, $where1) = _db_rewrite_sql();
    $arguments1 = array();
    $conditions1 = 'n.status = 1';
    
    if ($type = search_query_extract($keys, 'type')) {
      $types = array();
      foreach (explode(',', $type) as $t) {
	$types[] = "n.type = '%s'";
	$arguments1[] = $t;
      }
      $conditions1 .= ' AND (' . implode(' OR ', $types) . ')';
      $keys = search_query_insert($keys, 'type');
      }
    
    if ($category = search_query_extract($keys, 'category')) {
      $categories = array();
      foreach (explode(',', $category) as $c) {
	$categories[] = "tn.tid = %d";
	$arguments1[] = $c;
        }
      $conditions1 .= ' AND (' . implode(' OR ', $categories) . ')';
      $join1 .= ' INNER JOIN {term_node} tn ON n.vid = tn.vid';
      $keys = search_query_insert($keys, 'category');
    }
    
    // Build ranking expression (we try to map each parameter to a
    // uniform distribution in the range 0..1).
    $ranking = array();
    $arguments2 = array();
    $join2 = '';
    // Used to avoid joining on node_comment_statistics twice
    $stats_join = FALSE;
    $total = 0;
    if ($weight = (int) variable_get('node_rank_relevance', 5)) {
      // Average relevance values hover around 0.15
      $ranking[] = '%d * i.relevance';
      $arguments2[] = $weight;
        $total += $weight;
    }
    if ($weight = (int) variable_get('node_rank_recent', 5)) {
      // Exponential decay with half-life of 6 months, starting at last indexed node
      $ranking[] = '%d * POW(2, (GREATEST(MAX(n.created), MAX(n.changed), MAX(c.last_comment_timestamp)) - %d) * 6.43e-8)';
      $arguments2[] = $weight;
      $arguments2[] = (int) variable_get('node_cron_last', 0);
      $join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
      $stats_join = TRUE;
      $total += $weight;
    }
    if (module_exists('comment') && $weight = (int) variable_get('node_rank_comments', 5)) {
      // Inverse law that maps the highest reply count on the site to 1 and 0 to 0.
      $scale = variable_get('node_cron_comments_scale', 0.0);
      $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(c.comment_count) * %f))';
      $arguments2[] = $weight;
      $arguments2[] = $scale;
      if (!$stats_join) {
	$join2 .= ' LEFT JOIN {node_comment_statistics} c ON c.nid = i.sid';
      }
        $total += $weight;
    }
    if (module_exists('statistics') && variable_get('statistics_count_content_views', 0) && 
	$weight = (int) variable_get('node_rank_views', 5)) {
      // Inverse law that maps the highest view count on the site to 1 and 0 to 0.
      $scale = variable_get('node_cron_views_scale', 0.0);
      $ranking[] = '%d * (2.0 - 2.0 / (1.0 + MAX(nc.totalcount) * %f))';
      $arguments2[] = $weight;
      $arguments2[] = $scale;
      $join2 .= ' LEFT JOIN {node_counter} nc ON nc.nid = i.sid';
      $total += $weight;
    }
    
    // When all search factors are disabled (ie they have a weight of zero),
    // the default score is based only on keyword relevance and there is no need to
    // adjust the score of each item.
    if ($total == 0) {
      $select2 = 'i.relevance AS score';
      $total = 1;
    } else {
      $select2 = implode(' + ', $ranking) . ' AS score';
    }
    
    // Do search.
    $find = do_search($keys, 'node', 'INNER JOIN {node} n ON n.nid = i.sid ' . $join1, $conditions1 . (empty($where1) ? '' : ' AND ' . $where1), $arguments1, $select2, $join2, $arguments2);
    
    // Load results.
    $results = array();
    foreach ($find as $item) {
      // Build the node body.
      $node = node_load($item->sid);
      $node->build_mode = NODE_BUILD_SEARCH_RESULT;
      $node = node_build_content($node, FALSE, FALSE);
      $node->body = drupal_render($node->content);
      
      // Fetch comments for snippet.
      $node->body .= module_invoke('comment', 'nodeapi', $node, 'update index');
      // Fetch terms for snippet.
      $node->body .= module_invoke('taxonomy', 'nodeapi', $node, 'update index');
      
      $extra = node_invoke_nodeapi($node, 'search result');
      $results[] = array('link' => url('node/' . $item->sid, array('absolute' => TRUE)), 
			 'type' => check_plain(node_get_types('name', $node)), 
			 'title'=> $node->title, 
			 'user' => theme('username', $node), 
			 'date' => $node->changed, 
			 'node' => $node, 
			 'extra'=> $extra, 
			 'score'=> $item->score / $total, 
			 'snippet'=> search_excerpt($keys, $node->body),
			 );
    }
    return $results;
  }
}
